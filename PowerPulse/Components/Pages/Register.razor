@page "/register"
@using System.ComponentModel.DataAnnotations
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="flex items-center justify-center h-screen">
    <div class="card w-full max-w-md">
        <h1 class="text-2xl font-bold text-gray-800 mb-6 text-center">Register</h1>
        <EditForm FormName="register" Model="@registerModel" OnValidSubmit="HandleRegister" class="space-y-4">
            <DataAnnotationsValidator />
            <div>
                <label class="block text-gray-600">Username</label>
                <InputText @bind-Value="registerModel.Username" class="w-full p-2 border rounded-md" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>
            <div>
                <label class="block text-gray-600">Email</label>
                <InputText @bind-Value="registerModel.Email" class="w-full p-2 border rounded-md" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
            <div>
                <label class="block text-gray-600">Password</label>
                <InputText type="password" @bind-Value="registerModel.Password" class="w-full p-2 border rounded-md" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary w-full">Register</button>
        </EditForm>
        <p class="mt-4 text-center text-gray-600">
            Already have an account? <a href="/login" class="text-blue-600 hover:underline">Login</a>
        </p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="mt-4 text-red-600 text-center">@errorMessage</p>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm] private RegisterModel registerModel { get; set; } = new();
    private string errorMessage = string.Empty;

    private class RegisterModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleRegister()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/auth/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Username or email may already exist.";
            }
        }
        catch
        {
            errorMessage = "An error occurred. Please try again later.";
        }
    }
}