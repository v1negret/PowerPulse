@page "/login"
@using Blazored.LocalStorage
@using PowerPulse.Modules.Authentication.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="flex items-center justify-center h-screen">
    <div class="card w-full max-w-md">
        <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 text-center">Вход</h1>
        <EditForm FormName="login" Model="@loginModel" OnValidSubmit="HandleLogin" class="space-y-4">
            <DataAnnotationsValidator />
            <div>
                <label class="block text-gray-600 dark:text-gray-400">Псевдоним</label>
                <InputText @bind-Value="loginModel.Username" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <div>
                <label class="block text-gray-600 dark:text-gray-400">Пароль</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary w-full">Войти</button>
        </EditForm>
        <p class="mt-4 text-center text-gray-600 dark:text-gray-400">
            Нет аккаунта? <a href="/register" class="text-blue-600 hover:underline dark:text-blue-400">Зарегистрируйтесь</a>
        </p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="mt-4 text-red-600 dark:text-red-400 text-center">@errorMessage</p>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();
    private string errorMessage = string.Empty;
    private string tokenToSave = null;
    private bool shouldNavigate = false;

    private async Task HandleLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                tokenToSave = result.Token;
                shouldNavigate = true;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Invalid credentials. Please try again.";
            }
        }
        catch
        {
            errorMessage = "An error occurred. Please try again later.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (tokenToSave != null)
        {
            await LocalStorage.SetItemAsync("authToken", tokenToSave);
            tokenToSave = null;

            if (shouldNavigate)
            {
                Navigation.NavigateTo("/", forceLoad: true); // forceLoad обновляет страницу
                shouldNavigate = false;
            }
        }
    }

    private record LoginResponse(string Token);
}