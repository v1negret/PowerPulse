@page "/dashboard"
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Authorization
@using PowerPulse.Modules.EnergyConsumption.Models
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Анализ энергопотребления</h3>

<div class="dashboard-container">
    <div class="form-section">
        <h4>Добавить данные</h4>
        <EditForm FormName="dashboard" Model="@meterModel" OnValidSubmit="AddMeterReading">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Дата</label>
                <InputDate @bind-Value="meterModel.Date" class="form-control" />
            </div>
            <div class="form-group">
                <label>Показания (кВт·ч)</label>
                <InputNumber @bind-Value="meterModel.Reading" class="form-control" />
            </div>
            <div class="form-group">
                <label>Стоимость</label>
                <InputNumber @bind-Value="meterModel.Cost" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Добавить</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
    </div>
    <div class="grafana-section">
        <h4>Графики</h4>
        <iframe src="http://localhost:3000/d/dashboard-id?var-user_id=@userId" width="100%" height="400" frameborder="0"></iframe>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private MeterReadingModel? meterModel { get; set; } = new();

    private Guid userId;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }

            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            userId = Guid.Parse(jwtToken.Claims.First(c => c.Type == "sub").Value);
        }
        catch
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }

    private async Task AddMeterReading()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");
            var client = HttpClientFactory.CreateClient("ApiClient");
            client.DefaultRequestHeaders.Authorization = new("Bearer", token);

            var response = await client.PostAsJsonAsync("api/consumption/meter-reading", meterModel);

            if (response.IsSuccessStatusCode)
            {
                meterModel = new();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        StateHasChanged();
    }
}