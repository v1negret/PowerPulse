@page "/"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using PowerPulse.Services
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject ThemeService ThemeService
@rendermode InteractiveServer

<div class="space-y-6">
    <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
        <h1 class="text-3xl font-bold text-gray-800 dark:text-gray-100">Дашборды энергопотребления</h1>
        @if (IsAuthenticated)
        {
            <div class="flex flex-col sm:flex-row gap-2">
                <button @onclick="ShowAddReadingModal" class="btn btn-primary w-full sm:w-auto">Добавить показания</button>
                <select @bind="SelectedYear" class="p-2 border rounded-md w-full sm:w-auto dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600">
                    @for (int year = DateTime.Now.Year - 5; year <= DateTime.Now.Year + 1; year++)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
                <button @onclick="RefreshDashboard" class="btn btn-secondary w-full sm:w-auto">Обновить</button>
            </div>
        }
    </div>

    @if (IsAuthenticated)
    {
        <div class="card">
            <h2 class="text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4">Графики потребления</h2>
            <iframe src="@GetDashboardUrl()" class="w-full h-[400px] sm:h-[600px] border-0" @key="refreshKey"></iframe>
        </div>
    }
    else
    {
        <div class="card text-center">
            <p class="text-gray-600 dark:text-gray-400">Пожалуйста, <a href="/login" class="text-blue-600 hover:underline dark:text-blue-400">войдите</a>, чтобы просмотреть дашборд.</p>
        </div>
    }
</div>

@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2 class="text-xl font-bold text-gray-800 dark:text-gray-100 mb-4">Добавить показания</h2>
            <EditForm Model="@meterReadingModel" OnValidSubmit="HandleAddReading" class="space-y-4">
                <DataAnnotationsValidator />
                <div>
                    <label class="block text-gray-600 dark:text-gray-400">Дата</label>
                    <InputDate @bind-Value="meterReadingModel.Date" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600" />
                    <ValidationMessage For="@(() => meterReadingModel.Date)" />
                </div>
                <div>
                    <label class="block text-gray-600 dark:text-gray-400">Показания (кВт·ч)</label>
                    <InputNumber @bind-Value="meterReadingModel.Reading" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600" />
                    <ValidationMessage For="@(() => meterReadingModel.Reading)" />
                </div>
                <div>
                    <label class="block text-gray-600 dark:text-gray-400">Стоимость</label>
                    <InputNumber @bind-Value="meterReadingModel.Cost" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600" />
                    <ValidationMessage For="@(() => meterReadingModel.Cost)" />
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="button" @onclick="HideAddReadingModal" class="btn btn-secondary">Отмена</button>
                    <button type="submit" class="btn btn-primary">Отправить</button>
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="mt-4 text-red-600 dark:text-red-400">@errorMessage</p>
            }
        </div>
    </div>
}

@code {
    private string CurrentUserId { get; set; } = "user";
    private bool IsAuthenticated { get; set; }
    private bool showModal;
    [SupplyParameterFromForm]
    private MeterReadingModel meterReadingModel { get; set; }
    private string errorMessage = string.Empty;
    private HttpClient _httpClient;
    private int SelectedYear { get; set; } = DateTime.Now.Year;
    private Guid refreshKey = Guid.NewGuid();

    private class MeterReadingModel
    {
        [Required]
        public DateTime Date { get; set; } = DateTime.Now;
        [Required, Range(0, double.MaxValue)]
        public double Reading { get; set; }
        [Required, Range(0, double.MaxValue)]
        public decimal Cost { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _httpClient = HttpClientFactory.CreateClient("ApiClient");
        meterReadingModel ??= new MeterReadingModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeService.InitializeAsync();
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            IsAuthenticated = !string.IsNullOrEmpty(token);
            if (IsAuthenticated)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                CurrentUserId = (await (await _httpClient.GetAsync("api/Auth/user-uid")).Content.ReadAsStringAsync()).Replace("\"", "");
            }

            ThemeService.OnThemeChanged += () =>
            {
                RefreshDashboard();
                StateHasChanged();
            };

            StateHasChanged();
        }
    }

    private string GetDashboardUrl()
    {
        var from = new DateTime(SelectedYear, 1, 1, 0, 0, 0, DateTimeKind.Utc).ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'");
        var to = new DateTime(SelectedYear, 12, 31, 23, 59, 59, DateTimeKind.Utc).ToString("yyyy-MM-dd'T'HH:mm:ss.fff'Z'");
        var theme = ThemeService.IsDarkTheme ? "dark" : "light";
        return $"http://localhost:3000/d/eeisxytgvyuwwb/powerpulse?orgId=1&from={from}&to={to}&var-user_id={CurrentUserId}&var-time_bucket_interval=1m&kiosk&theme={theme}";
    }

    private void RefreshDashboard()
    {
        refreshKey = Guid.NewGuid();
    }

    private void ShowAddReadingModal()
    {
        showModal = true;
        meterReadingModel = new MeterReadingModel();
        errorMessage = string.Empty;
    }

    private void HideAddReadingModal()
    {
        showModal = false;
    }

    private async Task HandleAddReading()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/consumption/meter-reading", meterReadingModel);
            if (response.IsSuccessStatusCode)
            {
                showModal = false;
                RefreshDashboard();
            }
            else
            {
                errorMessage = "Не удалось добавить показания. Попробуйте снова.";
            }
        }
        catch
        {
            errorMessage = "Произошла ошибка. Попробуйте снова позже.";
        }
    }
}