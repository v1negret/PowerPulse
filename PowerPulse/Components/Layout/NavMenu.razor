@using Blazored.LocalStorage
@using PowerPulse.Services
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject ThemeService ThemeService
@rendermode InteractiveServer

<div class="nav-menu">
    <div class="container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4">
        <a href="/">
            <img src="/white-logo.svg" alt="PowerPulse Logo" class="h-6 w-auto" />
        </a>
        <div class="flex space-x-4 items-center">
            @if (IsAuthenticated)
            {
                <button @onclick="Logout" class="btn btn-secondary">Выйти</button>
            }
            else
            {
                <a href="/login" class="hover:underline">Войти</a>
                <a href="/register" class="hover:underline">Зарегистрироваться</a>
            }
            <button @onclick="ToggleTheme" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                @if (ThemeService.IsDarkTheme)
                {
                    <span>☀️ Свет</span>
                }
                else
                {
                    <span>🌙 Тьма</span>
                }
            </button>
        </div>
    </div>
</div>

@code {
    private bool IsAuthenticated { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateAuthState();
        if (firstRender)
        {
            await ThemeService.InitializeAsync();
            await UpdateThemeClass();
            ThemeService.OnThemeChanged += async () =>
            {
                await UpdateThemeClass();
                StateHasChanged();
            };
        }
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    private async Task UpdateThemeClass()
    {
        if (ThemeService.IsDarkTheme)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.remove('dark')");
        }
    }

    private async Task UpdateAuthState()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        IsAuthenticated = !string.IsNullOrEmpty(token);
        StateHasChanged();
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        IsAuthenticated = false;
        StateHasChanged();
        Navigation.NavigateTo("/login");
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += async (sender, args) =>
        {
            await UpdateAuthState();
        };
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= async (sender, args) =>
        {
            await UpdateAuthState();
        };
    }
}